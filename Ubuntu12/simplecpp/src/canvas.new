#include <simplecpp>
#include <cstring>

using namespace std;
Display *display; // A connection to X server

// Basic information
int screen_number;
int screen_width;
int screen_height;

Window canvas_window;

unsigned long white_pixel;
unsigned long black_pixel;

Colormap cmap;

GC gc;
XGCValues gc_vals;

XFontStruct *xfs;

// Current drawable
Drawable curr_d;

Pixmap screenBG;  // BG = background:to keep track of lines drawn by sprites.
                  // lines which are sprites are not drawn on this.

Pixmap screenTmp;

struct LtSprite
{
  bool operator()(const Sprite* s1, const Sprite* s2) const {
    //return s1->getZIndex() < s2->getZIndex();
    return s1 < s2;
  }
};

int canvas_width(){
  return screen_width;
}
int canvas_height(){
  return screen_height;
}

std::set<Sprite *, LtSprite> s_sprite;

void wait(float duration){
  usleep((int) duration*1000000);
}


int initCanvas(const char window_title[], int x1, int y1, int x2, int y2){

  display = XOpenDisplay(NULL);    // Connect X server by opening a display

  if(!display){
    cerr<<"Unable to connect X server\n";
    return 1;
  }

  screen_number = DefaultScreen(display);

  if(x1 == -1){
    x1 = 0;
    y1 = 0;
    screen_width = (DisplayWidth(display, screen_number) -100);
    screen_height = (DisplayHeight(display, screen_number) -100);
  }
  else{
    screen_width = x2;
    screen_height= y2;
  }

  white_pixel = WhitePixel(display, screen_number);
  black_pixel = BlackPixel(display, screen_number);

  //   cout << "x1,y1 " << x1<<","<<y1<<" x2,y2: "<<x2<<","<<y2<< 
  //     " screen_width,height "<< screen_width << ","<<screen_height<<endl;
  canvas_window = XCreateSimpleWindow(display,
				      RootWindow(display, screen_number),
				      x1,y1,
				      screen_width, screen_height,
				      1,
				      black_pixel,
				      white_pixel);

  XSetStandardProperties(display, canvas_window, window_title,
			 window_title, None, NULL, 0, NULL);

  XSelectInput(display, canvas_window, 
	       ExposureMask|ButtonPressMask|KeyPressMask|PointerMotionMask);

  XMapWindow(display, canvas_window);    // Map canvas window to display


  gc_vals.function = GXcopy;
  //  gc_vals.foreground = Color(COLOR("black"));
  gc_vals.line_width = 2;
  gc_vals.line_style = LineSolid;
  gc_vals.cap_style = CapButt;
  gc_vals.join_style = JoinMiter;

  gc = XCreateGC(display, canvas_window, 0 ,0);    // Create GC

  if(gc < 0){
    cerr<<"Unable to create graphic context.\n";
    return 2;                            // ERROR CODE 2: gc error
  }

  xfs = XLoadQueryFont(display, "-*-helvetica-bold-r-normal-*-24-*");

  //XClearWindow(display, canvas_window);
  //XMapRaised(display, canvas_window);

  cmap = DefaultColormap(display, screen_number);
  
  // Flush all events to X server and wait
  XSync(display, False);

  screenBG =XCreatePixmap(display, canvas_window, screen_width, screen_height, 
			  XDefaultDepth(display, screen_number));
  XCopyArea(display, canvas_window, screenBG, gc, 0,0,screen_width, screen_height, 0,0);

  //  {int p; cin >> p;}
  wait(0.1);
  XSync(display, False);

  screenTmp=XCreatePixmap(display, canvas_window, screen_width, screen_height, 
			  XDefaultDepth(display, screen_number));

  curr_d = canvas_window;

  return 0;
}

void closeCanvas(){
  // Flush all events to X server and wait
  XSync(display, True);

  // Free pixmap
  XFreePixmap(display, screenBG);
  XFreePixmap(display, screenTmp);

  // Delete GC
  XFreeGC(display, gc);

  // Destroy window
  XDestroyWindow(display, canvas_window);

  // Close display
  XCloseDisplay(display);

  // Delete all elements from set
  s_sprite.clear();
}

void drawLine(XPoint start, XPoint end, Color line_color, unsigned int line_width){

  gc_vals.foreground = line_color;
  gc_vals.line_width = line_width;

  XChangeGC(display, gc, GCForeground | GCLineWidth, &gc_vals);

  XSync(display, false);

  // Draw line
  XDrawLine(display, curr_d, gc, start.x, start.y, end.x, end.y);

  XSync(display, false);

}


Color COLOR(const char *color_string){
  XColor screen_color, true_color;
  XAllocNamedColor(display, cmap, color_string, &screen_color, &true_color );
  
  return screen_color.pixel;
}

Color COLOR(unsigned short red, unsigned short green, unsigned short blue){
  Color clr = 0;

  clr = red;  
  clr = clr << 8;
  clr = clr | green;
  clr = clr << 8;
  clr = clr | blue;

  return clr;
}

void drawPoint(XPoint point, Color point_color, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = point_color;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground, &local_gc_vals);

  XSync(display, false);

  // Draw point
  XDrawPoint(display, curr_d, local_gc, point.x, point.y);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void drawCircle(XPoint centre, int radius, Color fill_color, bool fill, unsigned int line_width, int line_style, int cap_style, int join_style, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Check fill
  if(fill){
    line_width = radius;
    radius /= 2;
  }

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = fill_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle, &local_gc_vals);

  XSync(display, false);

  // Draw full arc
  XDrawArc(display, curr_d, local_gc, centre.x - radius, centre.y - radius, radius * 2, radius * 2, 0, 23040);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);  
}


void drawEllipse(XPoint centre, int width, int height, Color fill_color, bool fill, unsigned int line_width, int line_style, int cap_style, int join_style, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = fill_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle, &local_gc_vals);

  XSync(display, false);

  // Draw full arc
  if(fill)
    XFillArc(display, curr_d, local_gc, centre.x - width / 2, centre.y - height / 2, width, height, 0, 23040);
  else
    XDrawArc(display, curr_d, local_gc, centre.x - width / 2, centre.y - height / 2, width, height, 0, 23040);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void drawPolygon(XPoint *points, int npoints, Color fill_color, bool fill, unsigned int line_width, int line_style, int cap_style, int join_style, int fill_rule, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = fill_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;
  local_gc_vals.fill_rule = fill_rule;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle | GCFillRule, &local_gc_vals);

  XSync(display, false);

  // Draw polygon
  if(fill)
    XFillPolygon(display, curr_d, local_gc, points, npoints, 
		 Complex, CoordModeOrigin);
  //Convex, CoordModeOrigin);
  else{

    XPoint pts[npoints + 1];
    int iter;

    // Create array with closed list
    for(iter = 0; iter < npoints; iter ++){
      pts[iter] = points[iter];
    }

    pts[iter] = points[0];

    XDrawLines(display, curr_d, local_gc, pts, npoints + 1, CoordModeOrigin);
  }

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void addSprite(Sprite *t){
  if(t){
    s_sprite.insert(t);
  }
}

void removeSprite(Sprite *t){
  if(t){
    s_sprite.erase(t);    
  }
}

void c_imprint(Sprite* s){
  Drawable temp;
  temp = curr_d;
  curr_d = screenBG;
  s->paint();
  curr_d = temp;
}


void repaint(){
  XSync(display, false);

  int tl_x=0,tl_y=0,width=canvas_width(),height=canvas_height();
  XCopyArea(display, screenBG, screenTmp, gc, 
	    tl_x, tl_y, width, height, tl_x, tl_y);

  curr_d = screenTmp;

  for(std::set<Sprite *>::iterator iter = s_sprite.begin(); 
      iter != s_sprite.end(); iter ++){
    (*iter)->paint();
  } 

  XCopyArea(display, screenTmp, canvas_window, gc, 
	    tl_x, tl_y, width, height, tl_x, tl_y);
    
  XSync(display, false);
  curr_d = canvas_window;

}


void nextEvent(XEvent *event){
  XSync(display, False);
  XNextEvent(display, event);
}

int textWidth(char op){
  string s;
  s= op;
  return  textWidth(s); 
}

int textWidth(string text){
  return XTextWidth(xfs,text.c_str(), text.size());
}
int textHeight(){
  return xfs->ascent + xfs->descent;
}
int textDescent(){
  return xfs->descent;
}

void drawText(Position position, string text, Color clr){
  XPoint p;
  p.x = position.getX(); p.y = position.getY();
  drawText(p, text.c_str(), clr);
}

void drawText(float x, float y, string text, Color clr){
  XPoint p;
  p.x = x; p.y = y;
  drawText(p, text.c_str(), clr);
}


void drawText(XPoint position, string message, Color clr){
  GC local_gc;
  XGCValues local_gc_vals;
 
  // Fill the structure  
  local_gc_vals.foreground = clr;
  local_gc_vals.font = xfs->fid;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCForeground
		       |GCFont, &local_gc_vals);

  char *cstr = new char [message.size()+1];
  strcpy (cstr, message.c_str());

  XTextItem ti;
  ti.chars = cstr;
  ti.nchars = strlen(cstr);
  ti.delta = 0;
  ti.font = None;

  XSync(display, false);

  XDrawText(display, curr_d, local_gc, 
	    position.x-textWidth(message)/2,
	    position.y+textHeight()/2 - textDescent(), &ti, 1);

  XSync(display, false); 

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void drawText(XPoint position, const char* text, Color clr){
  GC local_gc;
  XGCValues local_gc_vals;
 
  // Fill the structure  
  local_gc_vals.foreground = clr;
  local_gc_vals.font = xfs->fid;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCForeground
		       |GCFont
		       , &local_gc_vals);


  XTextItem ti;

  ti.chars = (char*)text;
  ti.nchars = strlen(text);
  ti.delta = 0;
  ti.font = None;

  XSync(display, false);

  XDrawText(display, curr_d, local_gc, 
	    position.x-XTextWidth(xfs,text,strlen(text))/2, 
	    position.y+textHeight()/2 - textDescent(), &ti, 1);

  XSync(display, false); 

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void spriteStatus(){
  cout<<"Count: "<<s_sprite.size()<<endl;
  for(std::set<Sprite *>::iterator iter = s_sprite.begin(); iter != s_sprite.end(); iter ++){
    cout<<"["<<"]-->"<<(*iter)<<endl;
  }
}

bool checkEvent(XEvent *event){
  if(XCheckMaskEvent(display, ButtonPressMask|KeyPressMask, event))
    return true;
  return false;
}

int getClick(){
  XEvent event;

  while(true){
    nextEvent(&event);
    if(event.type == ButtonPress){
      return event.xbutton.x * 65536 + event.xbutton.y;
    }
  }
}

