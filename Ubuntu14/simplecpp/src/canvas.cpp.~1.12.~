#include <canvas.h>
#include <iostream>

using namespace std;
Display *display; // A connection to X server

// Basic information
int screen_number;
int screen_width;
int screen_height;

Window canvas_window;

unsigned long white_pixel;
unsigned long black_pixel;

Colormap cmap;

GC gc;

// Current drawable
Drawable curr_d;

// Pixmap
Pixmap p;

struct LtSprite
{
  bool operator()(const Sprite* s1, const Sprite* s2) const {
    //return s1->getZIndex() < s2->getZIndex();
    return s1 < s2;
  }
};

std::set<Sprite *, LtSprite> s_sprite;

int initCanvas(const char window_title[]){
  // Connect X server by opening a display
  display = XOpenDisplay(NULL);

  // ERROR CODE 1: Unable to connect X server
  if(!display){
    cerr<<"Unable to connect X server\n";
    return 1;
  }

  // Get default screen 
  screen_number = DefaultScreen(display);

  // find the width of the default screen of our X server, in pixels.
  screen_width = DisplayWidth(display, screen_number);

  // find the height of the default screen of our X server, in pixels.
  screen_height = DisplayHeight(display, screen_number);

  // find the value of a white pixel on this screen.
  white_pixel = WhitePixel(display, screen_number);

  // find the value of a black pixel on this screen. 
  black_pixel = BlackPixel(display, screen_number);

  // Create a window
  canvas_window = XCreateSimpleWindow(display,
				      RootWindow(display, screen_number),
				      0, 0,
				      screen_width-20, screen_height-60,
				      1,
				      black_pixel,
				      white_pixel);

  XSetStandardProperties(display, canvas_window, window_title,
			 window_title, None, NULL, 0, NULL);

  // Map canvas window to display
  // XMapWindow(display, canvas_window);

  // Determine inputs
  //XSelectInput(display, canvas_window, ButtonPressMask|KeyPressMask);
  XSelectInput(display, canvas_window, ExposureMask|ButtonPressMask|KeyPressMask|PointerMotionMask);

  // Map canvas window to display
  XMapWindow(display, canvas_window);

  // Create GC
  gc = XCreateGC(display, canvas_window, 0 ,0);

  // ERROR CODE 2: gc error
  if(gc < 0){
    cerr<<"Unable to create graphic context.\n";
    return 2;
  }

  //XClearWindow(display, canvas_window);
  //XMapRaised(display, canvas_window);

  cmap = DefaultColormap(display, screen_number);
  
  // Flush all events to X server and wait
  XSync(display, False);

  // Set current drawable to window
  curr_d = canvas_window;

  // Create pixmap
  p = XCreatePixmap(display, canvas_window, screen_width, screen_height, XDefaultDepth(display, screen_number));

 // Change foreground colour to white
 XSetForeground(display, gc, white_pixel);

  // Useless drawing
  for(int i =0; i < 50; i ++){    
    XDrawPoint(display, curr_d, gc, i, i);
    XSync(display, False);
  }
  return 0;
}

void closeCanvas(){
  // Flush all events to X server and wait
  XSync(display, True);

  // Free pixmap
  XFreePixmap(display, p);

  // Delete GC
  XFreeGC(display, gc);

  // Destroy window
  XDestroyWindow(display, canvas_window);

  // Close display
  XCloseDisplay(display);

  // Delete all elements from set
  s_sprite.clear();
}

void drawLine(XPoint start, XPoint end, Color line_color, unsigned int line_width, int line_style, int cap_style, int join_style, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = line_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle, &local_gc_vals);

  XSync(display, false);

  // Draw line
  XDrawLine(display, curr_d, local_gc, start.x, start.y, end.x, end.y);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}


Color COLOR(const char *color_string){
  XColor screen_color, true_color;
  XAllocNamedColor(display, cmap, color_string, &screen_color, &true_color );
  
  return screen_color.pixel;
}

Color COLOR(unsigned short red, unsigned short green, unsigned short blue){
  Color clr = 0;

  clr = red;  
  clr = clr << 8;
  clr = clr | green;
  clr = clr << 8;
  clr = clr | blue;

  return clr;
}

void drawPoint(XPoint point, Color point_color, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = point_color;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground, &local_gc_vals);

  XSync(display, false);

  // Draw point
  XDrawPoint(display, curr_d, local_gc, point.x, point.y);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void drawCircle(XPoint centre, int radius, Color fill_color, bool fill, unsigned int line_width, int line_style, int cap_style, int join_style, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Check fill
  if(fill){
    line_width = radius;
    radius /= 2;
  }

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = fill_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle, &local_gc_vals);

  XSync(display, false);

  // Draw full arc
  XDrawArc(display, curr_d, local_gc, centre.x - radius, centre.y - radius, radius * 2, radius * 2, 0, 23040);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);  
}


void drawEllipse(XPoint centre, int width, int height, Color fill_color, bool fill, unsigned int line_width, int line_style, int cap_style, int join_style, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = fill_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle, &local_gc_vals);

  XSync(display, false);

  // Draw full arc
  if(fill)
    XFillArc(display, curr_d, local_gc, centre.x - width / 2, centre.y - height / 2, width, height, 0, 23040);
  else
    XDrawArc(display, curr_d, local_gc, centre.x - width / 2, centre.y - height / 2, width, height, 0, 23040);

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void drawPolygon(XPoint *points, int npoints, Color fill_color, bool fill, unsigned int line_width, int line_style, int cap_style, int join_style, int fill_rule, int function){
  GC local_gc;
  XGCValues local_gc_vals;

  // Fill the structure
  local_gc_vals.function = function;
  local_gc_vals.foreground = fill_color;
  local_gc_vals.line_width = line_width;
  local_gc_vals.line_style = line_style;
  local_gc_vals.cap_style = cap_style;
  local_gc_vals.join_style = join_style;
  local_gc_vals.fill_rule = fill_rule;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCFunction | GCForeground | GCLineWidth | GCLineStyle | GCCapStyle | GCJoinStyle | GCFillRule, &local_gc_vals);

  XSync(display, false);

  // Draw polygon
  if(fill)
    XFillPolygon(display, curr_d, local_gc, points, npoints, Convex, CoordModeOrigin);
  else{

    XPoint pts[npoints + 1];
    int iter;

    // Create array with closed list
    for(iter = 0; iter < npoints; iter ++){
      pts[iter] = points[iter];
    }

    pts[iter] = points[0];

    XDrawLines(display, curr_d, local_gc, pts, npoints + 1, CoordModeOrigin);
  }

  XSync(display, false);

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void addSprite(Sprite *t){
  if(t){
    s_sprite.insert(t);
  }
}

void removeSprite(Sprite *t){
  if(t){
    s_sprite.erase(t);    
  }
}

void repaint(RectBox box){

  // Check inputs
  // Compute width and height of area
  int width = int(box.bottom_right.GetXDistance() - box.top_left.GetXDistance());
  int height = int(box.bottom_right.GetYDistance() - box.top_left.GetYDistance());
  if(height < 0)
    return;

  if(width < 0)
    return;

  int tl_x = int(box.top_left.GetXDistance());
  int tl_y = int(box.top_left.GetYDistance());

  // Set current drawable as pixmap
  curr_d = p;
    
  // Clean given area from pixmap
  //XSetForeground(display, gc, white_pixel);
  XFillRectangle(display, curr_d, gc,  tl_x - 2, tl_y - 2, width+4, height+4);
  //XFillRectangle(display, curr_d, gc, 0, 0, screen_width, screen_height);
  
  // If bounding box each sprite intersects repaint area, call its paint()
  for(std::set<Sprite *>::iterator iter = s_sprite.begin(); iter != s_sprite.end(); iter ++){
   
    RectBox sp_box = (*iter)->boundingBox();

    float box_left = box.top_left.GetXDistance();
    float box_top = box.top_left.GetYDistance();
    float box_right = box.bottom_right.GetXDistance();
    float box_bottom = box.bottom_right.GetYDistance();

    float sp_box_left = sp_box.top_left.GetXDistance();
    float sp_box_top = sp_box.top_left.GetYDistance();
    float sp_box_right = sp_box.bottom_right.GetXDistance();
    float sp_box_bottom = sp_box.bottom_right.GetYDistance();

 
    // Check if bounding box of invalidated area intersects with sprite 
    if(!((sp_box_left > box_right) ||
	 (sp_box_right < box_left) ||
	 (sp_box_top > box_bottom) ||
	 (sp_box_bottom < box_top) )){
      (*iter)->paint();
    } 
  }

  XSync(display, false);

  // Paste from pixmap
  XCopyArea(display, p, canvas_window, gc, tl_x - 2, tl_y - 2, width+4, height+4, tl_x - 2, tl_y - 2);
  //XCopyArea(display, p, canvas_window, gc, 0, 0, screen_width, screen_height, 0, 0);

  XSync(display, false);

  // Set current drawable as window
  curr_d = canvas_window;
}

void repaint(){
  // Erase all
  XClearWindow(display, canvas_window);
  XSync(display, false);

  // Draw all sprites
  for(std::set<Sprite *>::iterator iter = s_sprite.begin(); iter != s_sprite.end(); iter ++)
    (*iter)->paint();

#ifdef DEBUG
  std::cerr<<"No. of sprites: "<<s_sprite.size()<<std::endl;
#endif
}


void nextEvent(XEvent *event){
  XNextEvent(display, event);
}

void drawText(XPoint position, const char *text, Color clr){
  GC local_gc;
  XGCValues local_gc_vals;
 
  // Fill the structure  
  local_gc_vals.foreground = clr;

  // Create gc for current drawable
  local_gc = XCreateGC(display, curr_d, GCForeground, &local_gc_vals);

  // Load font
  

  XTextItem ti;

  ti.chars = (char*)text;
  ti.nchars = strlen(text);
  ti.delta = 0;
  ti.font = None;

  XSync(display, false);

  // Draw point
  XDrawText(display, canvas_window, local_gc, position.x, position.y, &ti, 1);

  XSync(display, false); 

  // Free temporary GC
  XFreeGC(display, local_gc);
}

void spriteStatus(){
  cout<<"Count: "<<s_sprite.size()<<endl;
  for(std::set<Sprite *>::iterator iter = s_sprite.begin(); iter != s_sprite.end(); iter ++){
    cout<<"["<<(*iter)->getZIndex()<<"]-->"<<(*iter)<<endl;
  }
}

bool checkEvent(XEvent *event){
  if(XCheckMaskEvent(display, ButtonPressMask|KeyPressMask, event))
    return true;
  return false;
}
